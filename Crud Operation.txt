==============Crud Operations===========

preRequesites for this playlist

1. java 
2. spring Boot
3. maven - build tool
4. Mvc Architecture 
5. MySql - database

what is our further approach to create crudoperation

1 create required packages 
   entity,repository,service service impl,controller

2 create requires  classes with respect to packages..   


entity
========

package com.sarkar.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name = "employee")
public class Employee {
	
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	private String email;
	private String Password;
	private String phno;
	
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public String getPassword() {
		return Password;
	}
	public void setPassword(String password) {
		Password = password;
	}
	public String getPhno() {
		return phno;
	}
	public void setPhno(String phno) {
		this.phno = phno;
	}
	

}

==========
repository
=========
package com.sarkar.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.sarkar.entity.Employee;

@Repository
public interface EmployeeRepository extends JpaRepository<Employee, Long>{

}


=========
service
=========
package com.sarkar.service;

import java.util.List;
import java.util.Optional;

import org.springframework.stereotype.Service;

import com.sarkar.entity.Employee;

@Service
public interface EmployeeService {
	
	public Employee createUser(Employee employee);
	
	public List<Employee> getAllUsers();
	
	Optional<Employee> getUserById(Long id);
	
	Employee updateUser(Long id,Employee emp);
	
	void deleteUser(Long id);
	

}

===========
serviceImpl
============

package com.sarkar.serviceImpl;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;

import com.sarkar.entity.Employee;
import com.sarkar.repository.EmployeeRepository;
import com.sarkar.service.EmployeeService;

public class EmployeeServiceImpl implements EmployeeService {
	
	@Autowired
	private EmployeeRepository empRepo;

	@Override
	public Employee createUser(Employee employee) {
		return empRepo.save(employee);
		
	}

	@Override
	public List<Employee> getAllUsers() {
		
		return empRepo.findAll();
	}

	@Override
	public Optional<Employee> getUserById(Long id) {
		return empRepo.findById(id);
	}

	@Override
	public Employee updateUser(Long id, Employee emp) {
		return empRepo.findById(id).map(u ->{
			u.setName(emp.getName());
			u.setEmail(emp.getEmail());
			u.setPassword(emp.getPassword());
			u.setId(emp.getId());
			u.setPhno(emp.getPhno());
			return empRepo.save(emp);
			
		}).orElseThrow(()->new RuntimeException("Employee Not Found With This Id : " + id));
	}

	@Override
	public void deleteUser(Long id) {
		
		empRepo.deleteById(id);
		
		
		
	}

}


============
controller
============
package com.sarkar.rest;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.server.ResponseStatusException;

import com.sarkar.entity.Employee;
import com.sarkar.service.EmployeeService;

@RestController
@RequestMapping("/api/v1")
public class EmployeeRestController {

	@Autowired
	private EmployeeService empService;

	@PostMapping("/create")
	public ResponseEntity<Employee> createUser(@RequestBody Employee employee) {
		Employee user = empService.createUser(employee);

		return new ResponseEntity<>(user, HttpStatus.CREATED);

	}

	@GetMapping("/getEmp")
	public List<Employee> getUserById() {
		return empService.getAllUsers();

	}

	@GetMapping("/emp")
	public ResponseEntity<Employee> getUserById(@RequestParam Long id) {

		return empService.getUserById(id).map(ResponseEntity::ok)
				.orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND));

	}

	@PutMapping("/update")
	public ResponseEntity<Employee> updateUser(@RequestParam Long id, @RequestBody Employee emp) {
	    Employee updatedEmployee = empService.updateUser(id, emp);
	    
	    if (updatedEmployee == null) {
	        // If employee was not found, return 404
	        return ResponseEntity.status(HttpStatus.NOT_FOUND)
	                             .body(null);
	    }
	    return ResponseEntity.ok(updatedEmployee);
	}


	@DeleteMapping("/delete")
	public ResponseEntity<Void> deleteUser(@RequestParam Long id) {
		try {
			empService.deleteUser(id);
			return ResponseEntity.noContent().build();
		} catch (Exception e) {
			return ResponseEntity.notFound().build();
		}

	}

}

======================
Api URL For testing
======================
@PostMapping
localhost:8080/api/v1/create 


@GetMapping
localhost:8080/api/v1/getEmp


@GetMapping
localhost:8080/api/v1/emp?id=1


@PutMapping
localhost:8080/api/v1/update?id=3


@DeleteMapping
localhost:8080/api/v1/delete?id=3




=================
example json data
=================

{
    "name":"jhon",
    "email":"jhon@.com",
    "password":"sarkar",
    "phno":"7890354363"
}



